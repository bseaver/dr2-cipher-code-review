<?php
/**
 * @file
 * Implement a form using this Custom Module to perform
 * the "Caesar" Shift Cipher
 */

/**
 * Define our name space in $_SESSION
 */
define('CIPHER_MODULE_SESSION_SPACE', 'cipher_module_session');

/**
 * Implements hook_menu()
 */
function cipher_menu() {
    $items['cipher'] = array(
        'title' => 'Caesar Cipher',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('cipher_form'),
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM,
    );

    $items['cipher_results'] = array(
        'title' => 'Caesar Cipher Results',
        'page callback' => 'cipher_success',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    return $items;
}

function letters() {
    return 'abcdefghijklmnopqrstuvwxyz';
}

function max_shift() {
    return strlen(letters()) - 1;
}

function punctuation() {
    // From https://en.wikipedia.org/wiki/Punctuation
    return '\'[](){}<>:,-.!?";/';
}

function space() {
    return ' ';
}

function directions() {
    return array('left', 'right');
}

/**
 * Implements hook_form().
 */
function cipher_form() {
    $form['shift'] = array(
        '#title' => 'Shift',
        '#type' => 'textfield',
        '#description' => t('Enter a number between 1 and ' . max_shift() . ' for number of character positions to shift.'),
        '#element_validate' => array('element_validate_number', 'validate_shift_number'),
        '#required' => TRUE,
    );

    $form['direction'] = array(
        '#title' => 'Direction',
        '#type' => 'textfield',
        '#description' => t('Enter "left" or "right" for direction of character shift.'),
        '#element_validate' => array('validate_direction'),
        '#default_value' => '',
        '#required' => TRUE,
    );
    if (!$form['direction']['#default_value']) {
        $form['direction']['#default_value'] = directions()[mt_rand(0, 1)];
    }

    $form['phrase'] = array(
        '#title' => 'Phrase / Cipher',
        '#type' => 'textfield',
        '#description' => t('Enter phrase (or cipher) to encrypt (or decrypt) with only letters spaces and punctuation: ' . punctuation()),
        '#element_validate' => array('validate_phrase'),
        '#required' => TRUE,
    );
    $form['decrypt'] = array(
        '#title' => 'Decrypt',
        '#type' => 'checkbox',
        '#description' => 'Check if the phrase should be decrypted.',
    );
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Perform Caesar Cipher',
    );

    return $form;
}

function validate_shift_number($element) {
    $min = 1;
    $max = max_shift();
    if ($element['#value'] > $max || $element['#value'] < $min) {
        form_error($element, t($element['#title']. ' must be between '. $min . ' and ' . $max . '.'));
    }
}

function validate_direction($element) {
    $directions = directions();
    if (!in_array($element['#value'], $directions)) {
        form_error($element, t($element['#title']. ' must be either "' . join('" or "', $directions) . '".'));
    }
}

function validate_phrase($element) {
    $phrase = strtolower($element['#value']);
    $phrase_arr = str_split($phrase);
    $allowables = letters() . punctuation() . space();
    $allowables_arr = str_split($allowables);
    $allowable_letters_in_phrase = array_intersect($phrase_arr, $allowables_arr);

    if (count($phrase_arr) !== count($allowable_letters_in_phrase)) {
        form_error($element, t($element['#title']. ' must may contain only letters, spaces and punctuation: ' . punctuation() . ' .'));
    }
}

/**
 * Implements hook_form_submit().
 */
function cipher_form_submit($form, &$form_state) {
    $shift = $form_state['values']['shift'];
    $direction = $form_state['values']['direction'];
    $phrase = $form_state['values']['phrase'];
    $decrypt = $form_state['values']['decrypt'];
    $phrase = $phrase;
    $cipher = generate_caesar_cipher($shift, $direction, $phrase, $decrypt);
    $_SESSION[CIPHER_MODULE_SESSION_SPACE]['shift'] = $shift;
    $_SESSION[CIPHER_MODULE_SESSION_SPACE]['direction'] = $direction;
    $_SESSION[CIPHER_MODULE_SESSION_SPACE]['phrase'] = $phrase;
    $_SESSION[CIPHER_MODULE_SESSION_SPACE]['cipher'] = $cipher;
    $_SESSION[CIPHER_MODULE_SESSION_SPACE]['decrypt'] = $decrypt;
    $form_state['redirect'] = 'cipher_results';
}

function cipher_success() {
    $shift = $_SESSION[CIPHER_MODULE_SESSION_SPACE]['shift'];
    $direction = $_SESSION[CIPHER_MODULE_SESSION_SPACE]['direction'];
    $phrase = $_SESSION[CIPHER_MODULE_SESSION_SPACE]['phrase'];
    $cipher = $_SESSION[CIPHER_MODULE_SESSION_SPACE]['cipher'];
    $decrypt = $_SESSION[CIPHER_MODULE_SESSION_SPACE]['decrypt'];
    $phrase_label = ($decrypt?'Cipher':'Phrase');
    $cipher_label = ($decrypt?'Phrase':'Cipher');
    $output = <<<EOD
    <table>
        <tr>
            <th>Shift:</th>
            <td>$shift</td>
        </tr>
        <tr>
            <th>Direction:</th>
            <td>$direction</td>
        </tr>
        <tr>
            <th>$phrase_label:</th>
            <td>$phrase</td>
        </tr>
        <tr>
            <th>$cipher_label:</th>
            <td>$cipher</td>
        </tr>
        <tr>
            <td><a href="cipher">Encrypt / Decrypt Another Phrase</a></td>
            <td></td>
        </tr>
    </table>
EOD;
    return $output;
}

function generate_caesar_cipher($shift, $direction, $phrase, $decrypt) {
    $output = '';
    if ($direction === 'left') {
        $shift = -$shift;
    }
    if ($decrypt) {
        $shift = -$shift;
    }
    $phrase = strtolower($phrase);
    $phrase_arr = str_split($phrase);
    $phrase_length = count($phrase_arr);
    $letters_arr = str_split(strtolower(letters()));
    $letters_length = count($letters_arr);
    $character_map = array_merge($letters_arr, $letters_arr, $letters_arr);

    for ($i=0; $i < $phrase_length; $i++) {
        $next_character = $phrase_arr[$i];
        $found = array_search($next_character, $letters_arr, TRUE);
        if ($found !== FALSE) {
            $next_character = $character_map[$letters_length + $found + $shift];
        }
        $output .= $next_character;
    }

    return $output;
}
